// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  issuesCreated  Issue[]   @relation("author")
  issuesAssigned Issue[]   @relation("assignee")
  threads        Thread[]
  comments       Comment[]
  reviews        Review[]
}

model Issue {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  key        String
  params     Json
  title      String
  content    String
  authorId   String
  author     User     @relation("author", fields: [authorId], references: [id])
  assigneeId String?
  assignee   User?    @relation("assignee", fields: [assigneeId], references: [id])
  reviews    Review[]
  threads    Thread[]
}

model Review {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  status     ReviewStatus
  type       ReviewType
  reviewerId String
  reviewer   User         @relation(fields: [reviewerId], references: [id])
  issueId    String
  issue      Issue        @relation(fields: [issueId], references: [id])
}

enum ReviewStatus {
  draft
  reviewing
  approved
  rejected
}

enum ReviewType {
  intermediate
  final
}

model Thread {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  resolved  Boolean
  issue     Issue     @relation(fields: [issueId], references: [id])
  issueId   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
